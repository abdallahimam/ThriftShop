//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 12/20/2017 11:16:00 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ThriftShopContext
{

    [DatabaseAttribute(Name = "thrift_shop")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class ThriftShopDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ThriftShopDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertBrand(Brand instance);
        partial void UpdateBrand(Brand instance);
        partial void DeleteBrand(Brand instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);

        #endregion

        public ThriftShopDataContext() :
        base(GetConnectionString("ThriftShopDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public ThriftShopDataContext(MappingSource mappingSource) :
        base(GetConnectionString("ThriftShopDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public ThriftShopDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThriftShopDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThriftShopDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThriftShopDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Brand> Brands
        {
            get
            {
                return this.GetTable<Brand>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }
    }
}

namespace ThriftShopContext
{

    /// <summary>
    /// There are no comments for ThriftShopContext.Brand in the schema.
    /// </summary>
    [Table(Name = @"thrift_shop.brand")]
    public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BrandId;

        private string _BrandName;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBrandIdChanging(int value);
        partial void OnBrandIdChanged();
        partial void OnBrandNameChanging(string value);
        partial void OnBrandNameChanged();
        #endregion

        public Brand()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BrandId in the schema.
        /// </summary>
        [Column(Name = @"brand_id", Storage = "_BrandId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(8) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BrandId
        {
            get
            {
                return this._BrandId;
            }
            set
            {
                if (this._BrandId != value)
                {
                    this.OnBrandIdChanging(value);
                    this.SendPropertyChanging("BrandId");
                    this._BrandId = value;
                    this.SendPropertyChanged("BrandId");
                    this.OnBrandIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BrandName in the schema.
        /// </summary>
        [Column(Name = @"brand_name", Storage = "_BrandName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BrandName
        {
            get
            {
                return this._BrandName;
            }
            set
            {
                if (this._BrandName != value)
                {
                    this.OnBrandNameChanging(value);
                    this.SendPropertyChanging("BrandName");
                    this._BrandName = value;
                    this.SendPropertyChanged("BrandName");
                    this.OnBrandNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Brand_Product", Storage="_Products", ThisKey="BrandId", OtherKey="BrandId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Brand = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Brand = null;
        }
    }

    /// <summary>
    /// There are no comments for ThriftShopContext.Product in the schema.
    /// </summary>
    [Table(Name = @"thrift_shop.product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private string _ProductName;

        private string _ProductCategory;

        private double _ProductPrice;

        private int _BrandId;
        #pragma warning restore 0649

        private EntityRef<Brand> _Brand;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnProductCategoryChanging(string value);
        partial void OnProductCategoryChanged();
        partial void OnProductPriceChanging(double value);
        partial void OnProductPriceChanged();
        partial void OnBrandIdChanging(int value);
        partial void OnBrandIdChanged();
        #endregion

        public Product()
        {
            this._Brand  = default(EntityRef<Brand>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(8) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"product_name", Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory in the schema.
        /// </summary>
        [Column(Name = @"product_category", Storage = "_ProductCategory", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductCategory
        {
            get
            {
                return this._ProductCategory;
            }
            set
            {
                if (this._ProductCategory != value)
                {
                    this.OnProductCategoryChanging(value);
                    this.SendPropertyChanging("ProductCategory");
                    this._ProductCategory = value;
                    this.SendPropertyChanged("ProductCategory");
                    this.OnProductCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductPrice in the schema.
        /// </summary>
        [Column(Name = @"product_price", Storage = "_ProductPrice", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double ProductPrice
        {
            get
            {
                return this._ProductPrice;
            }
            set
            {
                if (this._ProductPrice != value)
                {
                    this.OnProductPriceChanging(value);
                    this.SendPropertyChanging("ProductPrice");
                    this._ProductPrice = value;
                    this.SendPropertyChanged("ProductPrice");
                    this.OnProductPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BrandId in the schema.
        /// </summary>
        [Column(Name = @"brand_id", Storage = "_BrandId", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BrandId
        {
            get
            {
                return this._BrandId;
            }
            set
            {
                if (this._BrandId != value)
                {
                    if (this._Brand.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBrandIdChanging(value);
                    this.SendPropertyChanging("BrandId");
                    this._BrandId = value;
                    this.SendPropertyChanged("BrandId");
                    this.OnBrandIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Brand in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Brand_Product", Storage="_Brand", ThisKey="BrandId", OtherKey="BrandId", IsForeignKey=true)]
        public Brand Brand
        {
            get
            {
                return this._Brand.Entity;
            }
            set
            {
                Brand previousValue = this._Brand.Entity;
                if ((previousValue != value) || (this._Brand.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Brand");
                    if (previousValue != null)
                    {
                        this._Brand.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Brand.Entity = value;
                    if (value != null)
                    {
                        this._BrandId = value.BrandId;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._BrandId = default(int);
                    }
                    this.SendPropertyChanged("Brand");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
